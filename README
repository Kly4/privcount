(If you are looking to set up and run Privex, then please read S2/S2-netified/README.)

There are two PrivEx schemes. One uses secret sharing (found in the S2 directory) and the other uses distributed decryption (found in the D2 directory).

Required libraries:
libssl-dev, libssl, and cffi are needed.

Setup:
Noise generation requires that we know the amount of traffic that will be seen by the DC. In the Tor example from the paper we can use the Tor consensus to figure this out. We will thus need two files: consensus and fingerprint. Example files have been included but you can download fresher consensuses from the metrics.torproject.org. 

consensus: This Tor consensus file is used to find the probability traffic will flow through a DC. 

fingerprint: This is contains the DC's Tor relay fingerprint. We provide a utility that extracts fingerprints from a consensus file. It is in the util directory and is called fingerprint_extract. Just pick a fingerprint from the output of this tool and store it in this file.

Parameters:
PrivEx depends on certain parameters that set the operational performance and security envelope. These can be found at the top of S2-core.py and D2-core.py. 

num_DC: the number of data collectors. 
num_TKS: the number of tally key servers.
num_websites: the number of websites to collect stats for.
sigma: the standard deviation of the Gaussian probability distribution for use in generating the noise.

N.B. resolution should not need changing, but if it is increased, then in the D2 variant the size of the lookup table needs to be increased to accommodate the potentially larger message size.

Execution:
Simply run ./S2-core or ./D2-core.py to see the implementation be run through the code base. The output of each is a table listing of visitor counts per website. 


----------

This README provides instructions on how to set up Privex, with its various types of nodes.

0. GENERAL
There are three types of nodes: Tally Server (TS), Tally Key Server(TKS), and Data Collector (DC).
There should be at least 2 TKSs and 1 Taller Server, and any number of Data Collectors. 
The TKSs should be operated by independant entities that do not share coercible relationships. The TS and one DC can be operated by the same entity.

1. SETUP
We now descibe the setup and operation of each of the node types. The order of setup is to start the TS, then the TKSs, and finally the DCs.

1.0 TS
The Tally Server needs to have a public IP and port exposed for listening for connections from the other two node types. 
In the keys/ directory place the public key and certificate for that key to be used for the TLS connections between the TS and TKS and DC nodes.

To start the server up run the following command:
python tallyListener.py -p <port> &

Where <port> is the open port as described above.

1.1 TKS
The Tally Key Server needs to have a public IP and port exposed. It also needs to be able to make outbound connections to the TS on the port selected in 1.0 above.
Create a file called thp.txt which contains the IP and port of the TS on a single space delimited line. See example file in directory.

In the keys/ directory place the public key and certificate for that key to be used for t
he TLS connections between the TKS and DC nodes.

To start the server up run the following command:
python tkgListener.py -p <port> -thp thp.txt &

Where <port> is open to inbound connections.

1.2 DC
The Data Collectors need to only be able to make outbound connections to the TKS and TS nodes.
Create a file called thp.txt which contains the IP and port of the TS on a single space d
elimited line.
Create a file called tkglist.txt which contains the IP and port on  a line each of each of the TKS nodes on a single space d
elimited line. 
The exit_prints.txt file contains the fingerprints of all the privex exits. Make sure you have the latest file. 
See example files in the directory.

The torrc file needs to have the following two lines added:
UsePrivex 1
PrivexPort <the port the DC listens on>

The Tor exit needs to be started after the DC node has come online. If the node fails while Tor is running, it will not cause Tor to fail, but will output error messages to Tor's info.logfile. Simply restart the DC and then restart the Tor exit.

To start the DC up run the following command:
python exitListener.py -i websites.txt -tkg tkglist.txt -p <port> -f <fingerprint_file> -c <consensus_file> -thp thp.txt &

Where websites.txt is the file containing the domain names that we want to collect statistics for (use the example file websites.txt by default), <port> is the port listening to Tor connections on localhost, <fingerprint_file> is the Tor fingerprint file in the Tor data directory, and <consensus> is the Tor consensus file in the Tor data directory.
