# everybody needs these configs
global:
    epoch: 60 # the safe time frame of stats collection for all stats
    clock_skew: 3 # (300s) # deal with clock skews and latency
    q: 2147483647 # ((2**31)-1) 2^31 - 1 happens to be a prime

# only the tally server needs these
tally_server:
    publish_delay: 23 # clock_skew + 20 seconds
    listen_port: 20001 # open port on which to listen for remote connections from TKSes
    key: 'keys/tally.key' # path to the key file
    cert: 'keys/tally.cert' # path to the certificate file
    results: 'results.txt' # path to file where the results will be stored

# only the tally key servers needs these
tally_key_server:
    start_delay: 3 # seconds
    listen_port: 20002 # open port on which to listen for remote connections from DCs
    key: 'keys/tks.key' # path to the key file
    cert: 'keys/tks.cert' # path to the certificate file
    tally_server_info: # where the tally server is located
        ip: 127.0.0.1
        port: 20001

# only the data collectors needs these
data_collector:
    start_delay: 5 # seconds
    register_delay: 8 # start_delay + 3 seconds
    listen_port: 20003 # local port on which to listen for local connections from Tor
    noise_weight: 1.0 # distribute noise among all machines / data collectors
    tally_server_info: # where the tally server is located
        ip: 127.0.0.1
        port: 20001
    tally_key_server_infos: # where the tally key servers are located
        -
            ip: 127.0.0.1
            port: 20002

    statistics:
        ################
        # exit traffic #
        ################
        -
            # at least one stream completed on the circuit
            type: 'Circuits_Count' # the key for this stat
            sigma: 1.0 # the sigma for the global noise we want for privacy for this stat
        -
            # no streams completed on the circuit
            type: 'InactiveCircuits_Count'
            sigma: 1.0
        -
            # completed streams per active circuit
            type: 'StreamsPerCircuit_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # bytes sent to server per completed stream
            type: 'BytesSentPerStream_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # bytes received from server per completed stream
            type: 'BytesReceivedPerStream_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # ratio of bytes sent to bytes received from server per completed stream
            type: 'BytesSentReceivedRatioPerStream_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # time between create and destroy per completed stream
            type: 'StreamLifeTime_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # time between creation of consecutive streams on the same circuit
            type: 'StreamIntercreationTime_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        #################
        # entry traffic #
        #################
        -
            # number of OR connections to clients
            # to help understand churn - do unique clients come and go or do they stick around long 
            type: 'Connections_Count'
            sigma: 1.0
        -
            # count over 20 minute intervals, then add to histogram counter
            type: 'UniqueClientIPs_Histogram'
            sigma: 1.0
        -
            # count over same 20 min intervals as client ips
            # number of circuits with at least 4096 bytes of transferred data per client IP
            type: 'CircuitsPerClientIP_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # number of circuits with less than 4096 bytes of transferred data on client OR connections
            type: 'InactiveCircuitsPerClientIP_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # count number of circuits that were around for longer than the 20 minute collection period
            type: 'LongLivedCircuitsPerClientIP_Count'
            sigma: 1.0
        -
            # bytes sent to client per circuit on client OR connections
            type: 'BytesSentPerCircuit_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # bytes received from client per circuit on client OR connections
            type: 'BytesReceivedPerCircuit_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
        -
            # ratio of bytes sent to bytes received per circuit on client OR connections
            type: 'BytesSentReceivedRatioPerCircuit_Histogram'
            sigma: 1.0
            bins: '0, 2, 4'
